for(i in 1:n){
Y[i] ~ dnorm(inprod(X[i,], beta[]), inv.var)
}
# Prior for beta
for(j in 1:p){
beta[j] ~ dnorm(0,0.0001)
}
# Prior for the inverse variance
inv.var   ~ dgamma(0.01, 0.01)
sigma     <- 1/sqrt(inv.var)
}",file="HW7-Q3a-BUGSmodel.txt")
# generate some initial value
set.seed(57)
# model
start.time = proc.time()
model.3a <- jags.model("HW7-Q3a-BUGSmodel.txt",
data=list("Y" = y.3a, "X" = dat, "n" = nrow(dat),
"p" = ncol(dat)),
n.chains=1, n.adapt=500)
end.time = proc.time()
end.time - start.time
start.time = proc.time()
update(model.3a, 10000, progress.bar = "text") # Burnin for 5000 samples
end.time = proc.time()
end.time - start.time
start.time = proc.time()
mcmc.out.3a <- coda.samples(model.3a,
variable.names=c("beta"),
n.iter=50000, progress.bar="text")
end.time = proc.time()
end.time - start.time
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
post.sample.3a = as.matrix(mcmc.out.3a[[1]])
# thinning - every 10
post.sample.3a.thinned = post.sample.3a[seq(1, nrow(post.sample.3a), 20),]
mcmcplot(post.sample.3a.thinned)
save(mcmc.out.3a, file = "q3a-500-10000-50000-no-intercept.RData")
beta.hat = colMeans(post.sample.3a)
beta.hat2
beta.hat
plot(1:length(beta.hat), beta.hat, main = "Estimate of beta") +
points(1:length(beta.hat), beta.hat2, col = "red")
plot(1:length(beta.hat), beta.hat, main = "Estimate of beta",
ylim = c(min(c(beta.hat2, beta.hat)), max(c(beta.hat2, beta.hat)))) +
points(1:length(beta.hat), beta.hat2, col = "red")
colnames(dat)
names
dim(post.sample.3c)
length(beta.hat)
post.sample.3c
boxplot(post.sample.3c[,1:49], names = states, las = 2)
states
length(boxplot(post.sample.3c[,1:49], names = states, las = 2))
length(boxplot(post.sample.3c[,1:49], names = states, las = 2))
length(states)
states
as.character(unique(all_dat$state_abbreviation))
length((as.character(unique(all_dat$state_abbreviation)))
)
boxplot(post.sample.3c[,1:49], names = states[-1], las = 2)
boxplot(post.sample.3c[,1:49], names = states[-1], las = 2, horizontal = T)
# highest and lowest posterior mean random effects
alpha.hat = colMeans(post.sample.3c[,1:49])
max(alpha.hat)
which.max(alpha.hat)
states[which.max(alpha.hat)+1]
min(alpha.hat)
states[which.min(alpha.hat)+1]
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
load("gambia.RData", verbose = T)
Y = gambia$pos
X = gambia[, -3]
n = length(Y)
p = ncol(X)
# JAGS sampler
cat("model {
# likelihood
for(i in 1:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,], beta[])
}
# prior
for(j in 1:p) {
beta[j] ~ dnorm(0, 0.01)
}
}",file="HW7-Q7a-BUGSmodel.txt")
# model
set.seed(99)
model <- jags.model("HW7-Q7a-BUGSmodel.txt",
data=list("Y" = Y, "X" = X, "n" = n, "p" = p),
n.chains=1, n.adapt=500)
update(model,5000,progress.bar="none") # Burnin for 10000 samples
mcmc.out <- coda.samples(model,
variable.names=c("beta"),
n.iter=20000, progress.bar="none")
post.sample = as.matrix(mcmc.out[[1]])
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
mcmcplot(post.sample)
set.seed(99)
model <- jags.model("HW7-Q7a-BUGSmodel.txt",
data=list("Y" = Y, "X" = X, "n" = n, "p" = p),
n.chains=1, n.adapt=500)
update(model,1000,progress.bar="text") # Burnin for 10000 samples
mcmc.out <- coda.samples(model,
variable.names=c("beta"),
n.iter=50000, progress.bar="text")
post.sample.7a = as.matrix(mcmc.out[[1]])
post.sample.7a.thinned = post.sample.7a[seq(1, nrow(post.sample.7a), 20),]
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
save(mcmc.out.3a, file = "q7a-500-10000-50000-no-intercept.RData")
mcmcplot(post.sample.7a.thinned)
dim(post.sample.7a.thinned)
par(mfrow = c(2,2))
acf(x = post.sample.7a.thinned[,1], plot = T, main = "beta_1")
acf(x = post.sample.7a.thinned[,2], plot = T, main = "beta_2")
acf(x = post.sample.7a.thinned[,3], plot = T, main = "beta_3")
acf(x = post.sample.7a.thinned[,4], plot = T, main = "beta_4")
acf(x = post.sample.7a.thinned[,5], plot = T, main = "beta_5")
acf(x = post.sample.7a.thinned[,6], plot = T, main = "beta_6")
acf(x = post.sample.7a.thinned[,7], plot = T, main = "beta_7")
par(mfrow = c(1,1))
n.iter = nrow(post.sample.7a.thinned)
par(mfrow = c(2,2))
plot(1:n.iter, post.sample.7a.thinned[,1], type = "l", main = "beta_1")
plot(1:n.iter, post.sample.7a.thinned[,2], type = "l", main = "beta_2")
plot(1:n.iter, post.sample.7a.thinned[,3], type = "l", main = "beta_3")
plot(1:n.iter, post.sample.7a.thinned[,4], type = "l", main = "beta_4")
plot(1:n.iter, post.sample.7a.thinned[,5], type = "l", main = "beta_5")
plot(1:n.iter, post.sample.7a.thinned[,6], type = "l", main = "beta_6")
plot(1:n.iter, post.sample.7a.thinned[,7], type = "l", main = "beta_7")
par(mfrow = c(1,1))
boxplot(post.sample.7a.thinned, names = paste0("beta_", 1:7), las = 2)
beta.lb = rep(0, p)
beta.ub = rep(0, p)
for (i in 1:p) {
beta.lb[i] = quantile(post.sample.7a.thinned[,i], probs = 0.025)
beta.ub[i] = quantile(post.sample.7a.thinned[,i], probs = 0.975)
}
beta.ci = cbind(beta.lb, beta.ub)
rownames(beta.ci) = paste0("beta_", 1:7)
colnames(beta.ci) = c("lower bound", "upper bound")
beta.ci
boxplot(post.sample.7a.thinned, names = paste0("beta_", 1:7), las = 2)
colMeans(post.sample.7a.thinned)
colMeans(post.sample.7a.thinned)
boxplot(post.sample.7a.thinned, names = paste0("beta_", 1:7), las = 2)
Y = gambia$pos
X = gambia[, -3]
n = length(Y)
# add columns indicating membership of locations
unique.x = unique(X$x)
unique.y = unique(X$y)
length(unique.x)
length(unique.y)
# it seems that if a location (x,y) would never differ with another location
# in only one coordinate
# so we can group observations using only x or only y
group.vec = rep(0, n)
for (i in 1:n) {
x.coord = X$x[i]
group.vec[i] = which(x.coord == unique.x)
}
X2 = as.matrix(cbind(X, group.vec))
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[]) + alpha[X[i,8]]
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:65) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
end.time = proc.time()
end.time - start.time
unique(group.vec)
which(X2[,8] == 1)
X2[which(X2[,8] == 1),]
idx.group1 = which(X2[,8] == 1)
idx.group1
idx.group1[1]+2
head()
head(X2[,8])
head(rownames(X2[,8]))
View(X2)
sum(idx.group1[1:3])
length(group.vec)
length(unique(group.vec))
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:33) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[])
}
for(i in 34:n) {
Y[i] ~ dnorm(inprod(X[i,1:7], beta[]) + alpha[X[i,8]-1], inv.var)
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:64) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:33) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[])
}
for(i in 34:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(inprod(X[i,1:7], beta[]) + alpha[X[i,8]-1])
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:64) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:33) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[])
}
for(i in 34:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(inprod(X[i,1:7], beta[])) + alpha[X[i,8]-1]
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:64) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:33) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[])
}
for(i in 34:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[]) + alpha[X[i,8]-1]
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:64) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
end.time = proc.time()
end.time - start.time
start.time = proc.time()
update(model.7b2, 5000, progress.bar = "text") # Burnin for 5000 samples
end.time = proc.time()
end.time - start.time
start.time = proc.time()
mcmc.out.7b2 <- coda.samples(model.7b2,
variable.names=c("beta", "alpha"),
n.iter=20000, progress.bar="text")
end.time = proc.time()
end.time - start.time
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
save(mcmc.out.7b2, file = "q7b-500-5000-20000-2.RData")
post.sample.7b2 = as.matrix(mcmc.out.7b2[[1]])
mcmcplot(mcmc.out.7b2)
setwd("/Files/documents/ncsu/fa18/ST740/hw/hw7")
cat("model {
# likelihood
for(i in 1:33) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[])
}
for(i in 34:n) {
Y[i] ~ dbern(q[i])
logit(q[i]) = inprod(X[i,1:7], beta[]) + alpha[X[i,8]-1]
}
# prior for beta = (beta_1, ..., beta_7, alpha_1, ..., alpha_65)
for(j in 1:7) {
beta[j] ~ dnorm(0, 0.01)
}
for(k in 1:64) {
alpha[k] ~ dnorm(0, 1/(tau^2))
}
# Prior for tau
tau ~ dunif(0, 100)
}",file="HW7-Q7b-BUGSmodel-2.txt")
# generate some initial value
set.seed(99)
# model
start.time = proc.time()
model.7b2 <- jags.model("HW7-Q7b-BUGSmodel-2.txt",
data=list("Y" = Y, "X" = X2, "n" = n),
n.chains=1, n.adapt=500)
end.time = proc.time()
end.time - start.time
start.time = proc.time()
update(model.7b2, 10000, progress.bar = "text") # Burnin for 5000 samples
end.time = proc.time()
end.time - start.time
start.time = proc.time()
mcmc.out.7b2 <- coda.samples(model.7b2,
variable.names=c("beta", "alpha"),
n.iter=50000, progress.bar="text")
end.time = proc.time()
end.time - start.time
end.time
post.sample.7b2 = as.matrix(mcmc.out.7b2[[1]])
post.sample.7b2.thinned = post.sample.7b2[seq(1, nrow(post.sample.7b2), 20),]
mcmcplot(post.sample.7b2.thinned)
save(mcmc.out.7b2, file = "q7b-500-5000-20000-2.RData")
colnames(post.sample.7b2.thinned)
colMeans(post.sample.7b.thinned[,65:ncol(post.sample.7b.thinned)])
colMeans(post.sample.7b2.thinned[,65:ncol(post.sample.7b2.thinned)])
# compare beta estimates
beta.7a = colMeans(post.sample.7a.thinned)
beta.7b = colMeans(post.sample.7b2.thinned[,65:ncol(post.sample.7b2.thinned)])
plot(1:length(beta.7a), beta.7a, main = "Estimate of beta",
ylim = c(min(c(beta.7a, beta.7b)), max(c(beta.7a, beta.7b)))) +
points(1:length(beta.7a), beta.7b, col = "red")
colnames(X)
plot(X[,1], X[,2])
unique.x
length(unique.x)
# plot the posterior means by the spatial locations
alpha.7b = colMeans(post.sample.7b2.thinned[,1:64])
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = c(0, alpha.7b), cex=0.9, font=2)
round(c(0, alpha.7b),2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = round(c(0, alpha.7b),2), cex=0.9, font=2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = round(c(0, alpha.7b),2), cex=0.9, font=1.5)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = round(c(0, alpha.7b),2), cex=0.6, font=2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = round(c(0, alpha.7b),2), cex=0.7, font=2)
plot(unique.y ~ unique.x, col="lightblue", pch=19, cex=1)
text(unique.y ~ unique.x, labels = round(c(0, alpha.7b),2), cex=0.9, font=2)
install.packages("topicmodels")
library("rjson")
library("jsonlite")
library("tidyverse")
library("topicmodels")
library("broom")
library("dplyr")
library("tidyr")
library("tidytext")
setwd("/Files/documents/ncsu/fa18/ST740/final/news_category")
out <- lapply(readLines("News_Category_Dataset.json"), fromJSON)
install.packages("tidytext")
library("tidytext")
library("rjson")
library("jsonlite")
library("tidyverse")
library("topicmodels")
library("broom")
library("dplyr")
library("tidyr")
library("tidytext")
setwd("/Files/documents/ncsu/fa18/ST740/final/news_category")
n_obs=length(out)
description=character(n_obs)
headline=character(n_obs)
category=character(n_obs)
for(i in 1:n_obs){
description[i]=out[i][[1]]$short_description
headline[i]=out[i][[1]]$headline
category[i]=out[i][[1]]$category
}
class(out)
length(out)
head(out)
out[[1]]
[1]
description[1]
news_data1=tibble(news_id=rep(1:n_obs,times=2),text=c(description,headline),
indicator=rep(c("desp","hdl"),each=n_obs,times=1),category=rep(category,times=2))
class(news_data1)
news_data1[[1]]
news_data1[[2]]
rep(1:3, times - 2)
rep(1:3, times = 2)
?tibble
head(news_data1,2)
class(news_data1)
names(news_data1)
head(news_data1$news_id)
head(news_data1$news_id, 20)
length(news_data1$news_id)
head(news_data1$text)
head(news_data1$indicator)
category
news_data1=tibble(news_id=rep(1:n_obs,times=2),
text=c(description,headline),
indicator=rep(c("desp","hdl"),each=n_obs,times=1),
category=rep(category,times=2))
news_data<-mutate(news_data1,
news_id_indicator=unite_(news_data1,"news_id_indicator",c("news_id","indicator"))$news_id_indicator)
by_news_word <- news_data %>% unnest_tokens(word,text)
words_count <- by_news_word %>% anti_join(stop_words) %>% count(news_id,word,sort=TRUE)%>%ungroup()
news_id_dtm<- words_count %>% cast_dtm(news_id,word,n)
news_id_dtm
news_id_lda<-LDA(news_id_dtm,k=31,method="Gibbs",control = list(seed=1234))
news_id_lda
news_topics <- tidy(news_id_lda,matrix="beta")
top_terms <- news_topics %>% group_by(topic) %>% top_n(5,beta) %>% ungroup() %>% arrange(topic,-beta)
a=news_topics %>% group_by(topic) %>% top_n(5,beta)
library(ggplot2)
top_terms %>% mutate(term=reorder(term,beta)) %>%
ggplot(aes(term,beta,fill=factor(topic)))+
geom_col(show.legend = FALSE)+facet_wrap(~topic,scales="free")+
coord_flip()
news_id_gamma <- tidy(news_id_lda,matrix="gamma")
news_id_gamma$document=as.integer(news_id_gamma$document)
plot(news_id_gamma %>% filter(document==1)%>%select(topic,gamma))
class<-news_id_gamma %>% group_by(document) %>% top_n(1,gamma) %>% arrange(document)
left_join(class,news_data[1:n_obs,],by=c("document"="news_id"))
plot(news_id_gamma %>% filter(document==1)%>%select(topic,gamma))
top_terms %>% mutate(term=reorder(term,beta)) %>%
ggplot(aes(term,beta,fill=factor(topic)))+
geom_col(show.legend = FALSE)+facet_wrap(~topic,scales="free")+
coord_flip()
install.packages("lda")
library(lda)
?slda.em
demo(slda)
data(poliblog.documents)
data(poliblog.vocab)
data(poliblog.ratings)
class(poliblog.documents)
length(poliblog.documents)
poliblog.documents[[1]]
?poliblog.documents
head(poliblog.vocab)
head(poliblog.ratings)
summary(poliblog.ratings)
unique(poliblog.ratings)
?slda.em
?lexicalize
try <- c("I am the very model of a modern major general",
"I have a major headache")
lexicalize(try)
try <- c("I am the very model of a modern major general general",
"I have a major headache")
lexicalize(try)
